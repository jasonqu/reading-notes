

###Variadic functions in Scala P55
The function apply in the object List is a variadic function, meaning it accepts zero or more arguments of type A:

```
def apply[A](as: A*): List[A] =
  if (as.isEmpty) Nil
  else Cons(as.head, apply(as.tail: _*))
```

### 3.3.2 Improving type inference for higher-order functions P58

```
def dropWhile[A](l: List[A], f: A => Boolean): List[A]
val xs: List[Int] = List(1,2,3,4,5)
val ex1 = dropWhile(xs, (x: Int) => x < 4)

def dropWhile[A](as: List[A])(f: A => Boolean): List[A] =
val xs: List[Int] = List(1,2,3,4,5) 
val ex1 = dropWhile(xs)(x => x < 4)
```

The syntax for calling this version of dropWhile looks like dropWhile(xs)(f). That is, dropWhile(xs) is returning a function, which we then call with the argument f (in other words, dropWhile is curried7). The main reason for grouping the arguments this way is to assist with type inference. 

More generally, when a function definition contains multiple argument groups,
type information flows from left to right across these argument groups. Here, the first argument group fixes the type parameter A of dropWhile to Int, so the annotation on x => x < 4 is not required.

###￼EXERCISE 3.13 P62
￼EXERCISE 3.20 EXERCISE 3.24
EXERCISE 3.29 tree's fold

4.1 The good and bad aspects of exceptions

There are two main problems with exceptions:
* As we just discussed, exceptions break RT and introduce context dependence, moving us away from the simple reasoning of the substitution model and making it possible to write confusing exception-based code. 
* Exceptions are not type-safe.

We’d like an alternative to exceptions without these drawbacks, but we don’t want to lose out on the primary benefit of exceptions: they allow us to consolidate and centralize error-handling logic, rather than being forced to distribute this logic throughout our codebase. 

Unlike C-style error codes, the error-handling strategy we use is completely type-safe, and we get full assistance from the type-checker in forcing us to deal with errors, with a minimum of syntactic noise. 

> Checked exceptions

> Java’s checked exceptions at least force a decision about whether to handle or reraise an error, but they result in significant boilerplate for callers. More importantly, they don’t work for higher-order functions, which can’t possibly be aware of the spe- cific exceptions that could be raised by their arguments. 

###￼EXERCISE 4.1 P75
None.map(Some(_)) == None

lookupByName("Joe").map(_.department) // joe's dept if found, None orelse
lookupByName("Joe").flatMap(_.manager) // Some(manager) if found, None orelse


EXERCISE 4.2

A common idiom is to do o.getOrElse(throw new Exception("FAIL")) to con- vert the None case of an Option back to an exception. The general rule of thumb is that we use exceptions only if no reasonable program would ever catch the exception; if for some callers the exception might be a recoverable error, we use Option (or Either, discussed later) to give them flexibility.

As you can see, returning errors as ordinary values can be convenient and the use of higher-order functions lets us achieve the same sort of consolidation of error- handling logic we would get from using exceptions. Note that we don’t have to check for None at each stage of the computation—we can apply several transformations and then check for and handle None when we’re ready. But we also get additional safety, since Option[A] is a different type than A, and the compiler won’t let us forget to explicitly defer or handle the possibility of None.

4.3.2 lifting

lising 4.3 try

EXERCISE 4.3 map2 4.4,4.5 OK 

For-comprehensions is a syntactic construct for lifting

def map2[A,B,C](a: Option[A], b: Option[B])(f: (A, B) => C): Option[C] =
  a flatMap (aa =>
  b map (bb =>
  f(aa, bb)))

=>

def map2[A,B,C](a: Option[A], b: Option[B])(f: (A, B) => C): Option[C] =
  for {
    aa <- a
    bb <- b
  } yield f(aa, bb)

Either
EXERCISE 4.8


### 5.1 Strict and non-strict functions

Non-strictness is a property of a function. To say a function is non-strict just means
that the function may choose not to evaluate one or more of its arguments.

|| && if while

一个例子：
```
def if2[A](cond: Boolean, onTrue: () => A, onFalse: () => A): A =
  if (cond) onTrue() else onFalse()
if2(a < 22,
  () => println("a"),
  () => println("b")
)

// scala 的语法糖写法
// Scala takes care of wrapping the expression in a thunk for us
def if2[A](cond: Boolean, onTrue: => A, onFalse: => A): A =
  if (cond) onTrue else onFalse

if2(false, sys.error("fail"), 3)
```

In fact, the type () => A is a syntactic alias for the type Function0[A].

In general, the unevaluated form of an expression is called a thunk, and we can force
the thunk to evaluate the expression and get a result.


Scala
won’t (by default) cache the result of evaluating an argument:

```
def maybeTwice(b: Boolean, i: => Int) = if (b) i+i else 0

scala> val x = maybeTwice(true, { println("hi"); 1+41 })
hi
hi
x: Int = 84

// use lazy val to solve this
def maybeTwice2(b: Boolean, i: => Int) = {
 lazy val j = i
 if (b) j+j else 0
}
```

A function f is strict if the expression f(x) evaluates to bottom for all x that
evaluate to bottom.

note : scala的lazy val
lazy val字段
就像单例中的延迟初始化

```scala
class A {
	lazy val x = {println(true); 3 + 4}
}
```

```
public class A
{
  private int x;
  private volatile boolean bitmap$0;
  
  public int x()
  {
    return this.bitmap$0 ? this.x : x$lzycompute();
  }
  
  private int x$lzycompute()
  {
    synchronized (this)
    {
      if (!this.bitmap$0)
      {
        Predef..MODULE$.println(BoxesRunTime.boxToBoolean(true));
        this.x = 7;
        this.bitmap$0 = true;
      }
      return this.x;
    }
  }
}
```

lazy val局部变量，与字段类似，只是使用方法替换字段

```scala
class A {
	def getAddResult(inc: Int) = {
		lazy val x = {println(true); 3 + 4}
		x + inc
	}
}
```

```java
public class A
{
  private final int x$1(IntRef x$lzy$1, VolatileByteRef bitmap$0$1)
  {
    return (byte)(bitmap$0$1.elem & 0x1) == 0 ?
      x$lzycompute$1(x$lzy$1, bitmap$0$1) : x$lzy$1.elem;
  }
  
  private final int x$lzycompute$1(IntRef x$lzy$1, VolatileByteRef bitmap$0$1)
  {
    synchronized (this)
    {
      if ((byte)(bitmap$0$1.elem & 0x1) == 0)
      {
        Predef..MODULE$.println(BoxesRunTime.boxToBoolean(true));
        x$lzy$1.elem = 7;
        bitmap$0$1.elem = ((byte)(bitmap$0$1.elem | 0x1));
      }
      return x$lzy$1.elem;
    }
  }
  
  public int getAddResult(int inc)
  {
    IntRef x$lzy = IntRef.zero();
    VolatileByteRef bitmap$0 = VolatileByteRef.create((byte)0);
    return x$1(x$lzy, bitmap$0) + inc;
  }
}
```

IntRef就是int的简单包装， VolatileByteRef是加了volatile的包装

```scala
package scala.runtime;

public class IntRef implements java.io.Serializable {
    private static final long serialVersionUID = 1488197132022872888L;

    public int elem;
    public IntRef(int elem) { this.elem = elem; }
    public String toString() { return java.lang.Integer.toString(elem); }

    public static IntRef create(int e) { return new IntRef(e); }
    public static IntRef zero() { return new IntRef(0); }
}

public class VolatileByteRef implements java.io.Serializable {
    private static final long serialVersionUID = -100666928446877072L;

    volatile public byte elem;
    public VolatileByteRef(byte elem) { this.elem = elem; }
    public String toString() { return java.lang.Byte.toString(elem); }

    public static VolatileByteRef create(byte e) { return new VolatileByteRef(e); }
    public static VolatileByteRef zero() { return new VolatileByteRef((byte)0); }
}
```

对按名参数=> 和无参函数：

```scala
class A {
	def getAddResult(a: => Int, b: () => Int) = {
		a + b()
	}
}
```

效果是一样的

```java
public class A
{
  public int getAddResult(Function0<Object> a, Function0<Object> b)
  {
    return a.apply$mcI$sp() + b.apply$mcI$sp();
  }
}
```

```
case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]

A nonempty stream consists of a head and a tail,
which are both non-strict. Due to technical
limitations, these are thunks that must be
explicitly forced, rather than by-name parameters.
```

是编译器会报错：

```
[error] E:\Project\IdeaProjects\scala-test\A.scala:15: `val' parameters may not be call-by-name
[error] case class Cons[+A](h: => A, t: => Stream[A]) extends Stream[A]
[error]                        ^
[error] E:\Project\IdeaProjects\scala-test\A.scala:15: `val' parameters may not be call-by-name
[error] case class Cons[+A](h: => A, t: => Stream[A]) extends Stream[A]
[error]                                 ^
[error] two errors found
[error] (compile:compile) Compilation failed
[error] Total time: 2 s, completed 2014-12-25 12:58:38
```



对lazy求值，使用
smart constructors, 避免重复求值

Making smart constructors that return the base type is a common trick.

5.3 Separating program description from evaluation

EXERCISE 5.6 声明类型












































































￼EXERCISE 5.7 append

For this reason, people sometimes describe streams as “first-class loops” whose logic can be combined using higher-order functions like map and filter.

The incremental nature of stream transformations also has important consequences for memory usage. Because intermediate streams aren’t generated, a transformation of the stream requires only enough working memory to store and transform the current element. 
For instance, in the transformation Stream(1,2,3,4).map(_ + 10).filter (_ % 2 == 0), the garbage collector can reclaim the space allocated for the values 11 and 13 emitted by map as soon as filter determines they aren’t needed. 

￼EXERCISE 5.7 efficient constant

Whereas a recursive function consumes data, a corecursive function produces data.



To make the type of actions convenient to talk about, and to simplify our thinking about them, let’s make a type alias for the RNG state action data type:

type Rand[+A] = RNG => (A, RNG)
val int: Rand[Int] = _.nextInt

def unit[A](a: A): Rand[A] = rng => (a, rng)

￼EXERCISE 6.6 ￼EXERCISE 6.7 ￼EXERCISE 6.8

GENERAL STATE
def map[S,A,B](a: S => (A,S))(f: A => B): S => (B,S)
type State[S,+A] = S => (A,S)
case class State[S,+A](run: S => (A,S))
type Rand[A] = State[RNG, A]




def unit[A](a: => A): Par[A]
def get[A](a: Par[A]): A,

listing 7.2
def sum(ints: IndexedSeq[Int]): Int = 
if (ints.size <= 1)
  ints headOption getOrElse 0 
else {
  val (l,r) = ints.splitAt(ints.length/2) 
  val sumL: Par[Int] = Par.unit(sum(l)) 
  val sumR: Par[Int] = Par.unit(sum(r)) 
  Par.get(sumL) + Par.get(sumR)
}


That is, unit simply returns a Par[Int] in this case, representing an asynchronous computation.
So it seems that we want to avoid calling get, or at least delay calling it until the very end. We want to be able to combine asynchronous computations without waiting for them to finish.


If we don’t call get, that implies that our sum function must return a Par[Int]. What conse- quences does this change reveal? Again, let’s just invent functions with the required signatures:

def sum(ints: IndexedSeq[Int]): Par[Int] = 
if (ints.size <= 1)
  Par.unit(ints.headOption getOrElse 0) 
else {
  val (l,r) = ints.splitAt(ints.length/2)
  Par.map2(sum(l), sum(r))(_ + _)
}


What if we keep map2 strict, but don’t have it begin execution immediately?
The problem is that if we construct our descriptions strictly, they’ll be rather heavy- weight objects. 

map2( map2(
unit(1),
    unit(2))(_ + _),
  map2(
    unit(3),
    unit(4))(_ + _))(_ + _)

it’ll likely occupy more space than the original list itself! It would be nice if our descriptions were more lightweight.

It seems we should make map2 lazy and have it begin immediate execution of both sides in parallel. This also addresses the problem of giving neither side priority over
the other.


7.1.3 Explicit forking

What if we make the forking more explicit? We can do that by inventing another function, def fork[A](a: => Par[A]): Par[A], which we can take to mean that the given Par should be run in a separate logical thread:

def sum(ints: IndexedSeq[Int]): Par[Int] = 
  if (ints.length <= 1)
    Par.unit(ints.headOption getOrElse 0) 
  else {
    val (l,r) = ints.splitAt(ints.length/2)
    Par.map2(Par.fork(sum(l)), Par.fork(sum(r)))(_ + _)
  }



























