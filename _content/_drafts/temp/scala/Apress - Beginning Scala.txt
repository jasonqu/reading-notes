deprecated extracted

Chapter 1
> scalac File1.scala File2.scala
> fsc File1.scala File2.scala
fsc is a separate compiler process that continues to run, waiting for new compilation jobs,
even after the compilation process is finished. This results in much faster compilation
times, but if you��re on a machine with limited RAM, you might not want to keep the
compilation process alive.

sample sum.scala:

import scala.io._
def toInt(in: String): Option[Int] =
try {
	Some(Integer.parseInt(in.trim))
} catch {
	case e: NumberFormatException => None
}

def sum(in: Seq[String]) = {
	val ints = in.flatMap(s => toInt(s))
	ints.foldLeft(0)((a, b) => a + b)
}

println("Enter some numbers and press ctrl-D (Unix/Mac) ctrl-C (Windows)")
val input = Source.fromInputStream(System.in)
val lines = input.getLines.collect
println("Sum "+sum(lines))



import
import scala.xml._
Import statements are made in the scope of prior imports. The following statement imports the scala.xml.transform package:
import transform._

import scala.collection.mutable.HashMap
import scala.collection.immutable.{TreeMap, TreeSet}
import scala.util.parsing.json.{JSON => JsonParser}   // import and rename

scala static import
scala> object Moose {
def bark = "woof"
}
defined module Moose
scala> import Moose._
import Moose._
scala> bark


��������
def largest(as: Int*): Int = as.reduceLeft((a, b) => a max b)
A variable-length argument method may be called as follows:
largest(1)
largest(2, 3, 99)
largest(33, 22, 33, 22)

You can mix type parameters with variable-length arguments:
def mkString[T](as: T*): String = as.foldLeft("")(_ + _.toString)

And you can put bounds on the type parameters. In this case, the types that are passed
in must be Number or a subclass of Number:
def sum[T <: Number](as: T*): Double = as.foldLeft(0d)(_ + _.doubleValue)

Overriding methods in Scala is different than Java. Methods that override declared
methods must include the override modifier. Methods that override abstract methods
may include the override modifier.
abstract class Base {
	def thing: String
}
class One extends Base {
	def thing = "Moof"
}
Methods that take no parameters and variables can be accessed the same way, and a
val can override a def in a superclass. This principle of uniform access turns out to be very
useful.
class Two extends One {
	override val thing = (new java.util.Date).toString
}
class Three extends One {
	override lazy val thing = super.thing + (new java.util.Date).toString
}



��ֵʱ����ֱ��ʹ��tuple��ֵ
val (i1: Int, s1: String) = Pair(33, "Moof")


P57 call by name �����ĵ��÷�ʽ

P58 Functions, apply, update, and Compiler Magic
Scala is a functional language, which means that you can pass functions to methods and
return them from methods and functions. A function is a block of code that takes parameters
and returns a value. In Scala, functions are instances. Given that Scala is constrained
by the Java Virtual Machine, it cannot pass a pointer to an arbitrary block of code, so Scala
implements functions as anonymous inner classes that have a particular interface. When
you pass a function, you��re just passing an object with a certain trait (interface).


Case Class
case class Stuff(name: String, age: Int)
Ĭ��ʵ����equals toString �ȷ������൱������Ĵ��룺
class Stuff(val name: String, val age: Int) {
	override def toString = "Stuff("+name+","+age+")"
	override def hashCode = name.hashCode + age
	override def equals(other: AnyRef) = other match {
		case s: Stuff => this.name == s.name && this.age == s.age
		case _ => false
	}
}
object Stuff {
	def apply(name: String, age: Int) = new Stuff(name, age)
	def unapply(s: Stuff) = Some((s.name, s.age))
}


Basic Pattern Matching �Ѿ���ǿ����
Stuff("David", 45) match {
	case Stuff("David", 45) => true
	case _ => false
}

Stuff("David", 45) match {
	case Stuff("David", _) => "David"
	case _ => "Other"
}

Stuff("David", 45) match {
	case Stuff("David", howOld) => "David, age: "+howOld
	case _ => "Other"
}

Stuff("David", 45) match {
	case Stuff("David", age) if age < 30 => "young David"
	case Stuff("David", _) => "old David"
	case _ => "Other"
}

x match {
	case d: java.util.Date => "The date in milliseconds is "+d.getTime
	case u: java.net.URL => "The URL path: "+u.getPath
	case s: String => "String: "+s
	case _ => "Something else"
}
�ȼ��������java
if (x instanceOf Date) return "The date in milliseconds is "+((Date) x).getTime();
if (x instanceOf URL) return "The URL path: "+((URL) x).getPath();
if (x instanceOf String) return "String "+((String) x);
return "Something else";


forѭ��

val lst = (1 to 18 by 3).toList
for {i <- lst if isOdd(i)} yield i
����� List[Int] = List(1, 7, 13)

try-catch
try {
	file.write(stuff)
} catch {
	case e: java.io.IOException => // handle IO Exception
	case n: NullPointerException => // handle null pointer
}

try{Integer.parseInt("dog")} catch {case _ => 0}


Chapter 3 Collecton
Range ���ӳٳ�ʼ����
(1 to Integer.MAX_VALUE - 1).take(5)

List ����
��ʼ��
1 :: 2 :: 3 :: Nil
List(1,2,3)

��Ԫ��
99 :: x
x ::: y

filter remove
List(1,2,3).filter(x => x % 2 == 1)
List(1,2,3).remove(x => x % 2 == 1)

take while
"Elwood eats mice".takeWhile(c => c != ' ')

map
List("A", "Cat").map(_.toLowerCase)
List("A", "Cat").map(_.length)
ist(a,d,e).map(n => <li>{n.first}</li>)

sort
List(99, 2, 1, 45).sort(_ < _)

First Name of Valid Persons, Sorted by Age
def validByAge(in: List[Person]) = in.filter(_.valid).
sort(_.age < _.age). map(_.first)

reduce����
List(8, 6, 22, 2).reduceLeft(_ max _)
List(1,2,3,4).foldLeft(0) (_ + _)
List(1,2,3,4).foldLeft(1) (_ * _)

����༶List
val n = (1 to 3).toList
n.map(i => n.map(j => i * j))
��ʱ�����
List[List[Int]] = List(List(1, 2, 3), List(2, 4, 6), List(3, 6, 9))
����ʹ��flatmap�����༶���б�Ϊһ��
n.flatMap(i => n.map(j => i * j))


n.filter(isEven).flatMap(i => n.filter(isOdd).map(j => i * j))
��
for {i <- n if isEven(i); j <- n if isOdd(j)} yield i * j
��bytecode�㼶����һ����

���� �������ֵ�����������ת�� P66


Tuple Ԫ��
def sumSq(in: List[Double]): (Int, Double, Double) =
in.foldLeft((0, 0d, 0d))((t, v) => (t._1 + 1, t._2 + v, t._3 + v * v))
�������ֵ��ʱ�������

Ҳ����дΪ���������ӿɶ�
ef sumSq(in: List[Double]) : (Int, Double, Double) =
in.foldLeft((0, 0d, 0d)){
case((cnt,sum,sq),v)=> (cnt+1,sum+v,sq+v*v)}

��Ԫ��
scala> Tuple2(1,2) == Pair(1,2) 
scala> Pair(1,2) == (1,2) 
scala> (1,2) == 1 -> 2



Map[K, V] ��ϣ��
var p = Map(1 -> "David", 9 -> "Elwood")
�޸�p ֻ���������ķ�ʽ
p = p + 8 -> "Archer"
��
p += 8 -> "Archer"

ֱ��ʹ��apply��������û��ֵ��ʱ���׳��쳣
scala> p(9)
res12: java.lang.String = Elwood
scala> p(88)
java.util.NoSuchElementException: key not found: 88

����ʹ��get���������û��ֵ���õ�None��������һ��Some
scala> p.get(88)
res10: Option[java.lang.String] = None
scala> p.get(9)
res11: Option[java.lang.String] = Some(Elwood)

Ҳ���Լ�һ��Ĭ��ֵ
scala> p.getOrElse(99, "Nobody")
res55: java.lang.String = Nobody
scala> p.getOrElse(1, "Nobody")
res56: java.lang.String = David

��ȡһ��key���Ľ����
scala> 1 to 5 flatMap(p.get)
res53: Seq.Projection[java.lang.String] = RangeG(David)

��������
-= --= ��remove
contains exists ǰ��Ĳ����Ǽ��ϲ�����������һ��bool�ķ���
p.keys.reduceLeft(_ max _)
p.values.reduceLeft(_ max _)

def removeInvalid(in: Map[Int, Person]) = in.filter(kv => kv._2.valid)


Option[T]
Option[T] provides a container for zero or one element of a given type. Option provides a very powerful alternative to Java��s null. An Option[T] can be either Some[T] or None. None is an object. There is a single instance of None in your Scala program, so it��s kind of like null. But None has methods on it, so you can invoke map, flatMap, filter, foreach, and so on no matter whether you have Some or None.
��һ����Some��None ������࣬������������NPE

����һ�������ݿ��л�ȡʵ��ķ���
def findPerson(key: Int): Option[Person]
����ֱ����һ����ȡ����ķ���
def ageFromKey(key: Int): Option[Int] = findPerson(key).map(_.age)
����������Ƿ���Some��None

��һ��������ת���ϵ�Ӧ��
import java.lang.{Boolean => JBool}
def tryo[T](f: => T): Option[T] = try {Some(f)} catch {case _ => None}

def toInt(s: String): Option[Int] = tryo(s.toInt)
def toBool(s: String) = tryo(JBool.parseBoolean(s))

ʵ�� ��һ��Map��ȡPerson���� P97 ��java����Ա�
def personFromParams(p: Map[String, String]): Option[Person] = 
	for {name <- p.get("name")
	ageStr <- p.get("age")
	age <- toInt(ageStr) 
	validStr <- p.get("valid") 
	valid <- toBool(validStr)}
yield new Person(name, age, valid)

Some
scala> Some(3).get
res57: Int = 3
But be careful, because if the Option is None, an exception will be raised: 
scala> None.get
java.util.NoSuchElementException: None.get

Like Map, Option has a getOrElse method that returns a default value if the contents are undefined:
scala> Some(3).getOrElse(44)
res59: Int = 3



XML
scala> <b id="greeting">Hello World</b>
res1: scala.xml.Elem = <b id="greeting">Hello World</b>
scala> <b ns:hi='hello'>Hello</b>
res2: scala.xml.Elem = <b ns:hi="hello">Hello</b>

Scala represents XML as a Seq[Node], and Node is a superclass of NodeSeq, which is a subclass of Seq[Node]. That means all the collections methods that we��ve been exploring are available on XML collections including map, flatMap, filter, and foreach. This also means that XML can be used in for comprehensions. We��ll explore that in the next subsection.
scala> def len(seq: Seq[_]) = seq.length
????????????????len: (Seq[_])Int

scala> len(<b>Hello</b>)
res1: Int = 1
scala> len(List(1,2,3))
res11: Int = 3

XML ���Ա���̬����
def now = System.currentTimeMillis.toString
<b time={now}>Hello World</b>

<stuff>{(1 to 3).map(i => <v id={i.toString}>#{i}</v>)} </stuff>

����if ��������� else
<b>{if (true) "dogs"}</b> wrong
<b>{if (true) "dogs" else ""}</b> right

Scala correctly escapes characters from your Scala expressions:
scala> <b>{"Hello & Goodbye"}</b>
res3: scala.xml.Elem = <b>Hello &amp; Goodbye</b>
scala> <b attr={"Hello < Zoo"}/>
res6: scala.xml.Elem = <b attr="Hello &lt; Zoo"></b>

but if you��re trying to embed a script in your XML, it might not be the right thing:
You can use PCData to embed unescaped characters in your XML: 
scala> <script>{PCData(info)}</script>


Parsing XML
import scala.xml._
val xml = XML.load("http://demo.liftweb.net/")

all the <a> tags in the document
xml \\ "a"
The \\ (double backslash) operator finds all the tags with the given label in the document. The \ (single backslash) operator finds all the tags with the given label that are direct chil- dren of the current tag.

(xml \\ "a").map(_ \ "@href").map(_.text).filter(_ startsWith "http:")
res11: Seq[String] = ArrayBuffer(http://liftweb.net, http://scala-lang.org, ...

res11: Seq[String] = ArrayBuffer(http://liftweb.net, http://scala-lang.org, ...

scala> val x2 = <x>{(1 to 3).map(i => <i>{i}</i>)}</x>
x2: scala.xml.Elem = <x><i>1</i><i>2</i><i>3</i></x>
Let��s find all the <i> tags: 
scala> x2 \ "i"
res26: scala.xml.NodeSeq = <i>1</i><i>2</i><i>3</i>
Now, get the text from each tag:
scala> (x2 \ "i").map(_.text)
res27: Seq[String] = ArrayBufferRO(1, 2, 3)
and convert to an Int:
scala> (x2 \ "i").map(_.text.toInt)
res28: Seq[Int] = ArrayBufferRO(1, 2, 3)
Finally, we sum up the collection:
scala> (x2 \ "i").map(_.text.toInt).foldLeft(0)(_ + _)
res29: Int = 6


Modifying XML
import scala.xml._
import scala.xml.transform._
val removeIt = new RewriteRule {
	override def transform(n: Node): NodeSeq = n match {
		case e: Elem if (e \ "@instruction").text == "remove" => NodeSeq.Empty
		case n => n 
	}
}

val xmlBooks =
<books instruction="update">
<book instruction="remove" name="book1" status=""/>
<book instruction="add" name="book2" status=""/> </books>

new RuleTransformer(removeIt).transform(xmlBooks)
��� P109


Concurrency Without Synchronization
P111 Listing 3-8. Multics.scala




Chapter 4 ����

�������Ƕ���
scala> val f: Int => String = x => "Dude: "+x
f: Int => String = <function1>

������Ϊ��������
scala> def w42(f: Int => String) = f(42)
w42: (f: Int => String)String
scala> w42(f)
res4: String = Dude: 42

���ֵ��÷�ʽ
scala> w42((i:Int) => f(i))
scala> w42(i => f(i))
scala> w42(f(_))
scala> w42(f)

desuger��ķ����������ģ�
w42(new Function1[Int, String] { 
def apply(i: Int) = f(i)
})

scala> w42(new Function1[Int, String] { def apply(i: Int) = f(i)})
scala> w42 {i => (1 to i).mkString(",")}



Partial Application and Functions

Methods and functions are different things. In Scala, everything except a method is an instance; therefore methods are not instances. Methods are attached to instances and can be invoked on instances. Functions are instances that implement a FunctionNN trait, where NN is the number of parameters the function takes. There��s nothing magic at runtime about functions. However, at compile time, there is plenty of syntactic sugar that makes the number of characters required to create a function very, very small.
Scala traces its roots to functional languages including ML and Haskell. In these languages, a function that takes two Ints and returns a String is the same as a function that takesanIntandreturnsafunctionthattakesanIntandreturnsaString.Thus(Int, Int) => String and Int => Int => String are the same in Haskell but not in Scala. Haskell makes it easy to create a new function by applying the first parameter to a function that will return a new function that can then be passed around or applied. This is called partial application because some of the parameters are passed to the function rather than all the parameters being applied to the function. Scala requires a separate syntax to automatically generate partially applied functions.
scala> def plus(a: Int, b: Int) = "Result is: "+(a + b)
plus: (a: Int, b: Int)String

scala> val p = (b: Int) => plus(42, b)
p: Int => String = <function1>

It turns out that partial application of functions is a common thing. It allows you to build up functions based on values in a given scope and allows for better code reuse. Scala
provides syntax to make it easier to build partially applied functions. Parameters can be specified in different parenthesis groups:

scala> def add(a: Int)(b: Int) = "Result is: "+(a + b)
add: (a: Int)(b: Int)String

scala> add(1)(2)
res19: String = Result is: 3

scala> add(1){new java.util.Random().nextInt(100)}
res20: String = Result is: 16


It also allows you to easily promote a method to a partially applied function very easily:
scala> w42(add(1))
res21: String = Result is: 43

You can also create a function by partially applying a method and converting this into a function
scala> def f2 = add(1) _
f2: Int => String
scala> w42(f2)
res22: String = Result is: 43


Functions and Type Parameters
Methods can have type parameters. Type parameters define the type of other parameters or of the method��s return value. Note that functions cannot take type parameters. The parameter and return types of a function must be defined when the function is created.

scala> def t42[T](f: Int => T): T = f(42)
t42: [T](f: Int => T)T

So, we can pass our f function, Int => String, and t42 returns a String:
scala> t42(f)
res23: String = Dude: 42

But, if we pass in a function that returns an Int, t42 returns an Int:
scala> t42(1 +)
warning: there were 1 feature warning(s); re-run with -feature for details
res24: Int = 43

������ʾ����Ϊ����
t42[Int](1 +)


Functions Bound to Variables in Scope
Functions are bound to the variables in the scope in which the function is created. This can come in very handy as it allows you to carry state around with them. For example, let��s create a variable, foo, and assign it a value
scala> val foo = "dog"
foo: String = dog

scala> val whoTo = (s: String) => s+" "+foo
whoTo: String => String = <function1>

scala> whoTo("I love my")
res25: String = I love my dog

Functions can be bound to vars and vals. 
�����ڷ����ڲ��޸ı���
scala> var strs: List[String] = Nil
strs: List[String] = List()

scala> val strF = (s: String) => {strs ::= s; s+" Registered"}
strF: String => String = <function1>

scala> strF("a")
res26: String = a Registered
scala> strF("b")
res27: String = b Registered
scala> strs
res28: List[String] = List(b, a)

scala> List("p", "q", "r").map(strF)
res29: List[String] = List(p Registered, q Registered, r Registered)
scala> strs
res30: List[String] = List(r, q, p, b, a)


Putting Functions in Containers
���Խ������������󣬷���������
Let��s create a function, bf, which takes an Int and returns a function:

scala> def bf: Int => Int => Int = i => v => i + v
bf: Int => (Int => Int)
scala> val fs = (1 to 5).map(bf).toArray
fs: Array[Int => Int] = Array(<function1>, <function1>, <function1>, <function1>
, <function1>)
We��ve got an Array[Int => Int],

scala> fs(0)(1)
res0: Int = 2
scala> fs(4)(3)
res2: Int = 8

It��s theoretically cool that functions are instances that can be manipulated like any
other instance. There are practical uses of putting functions in Maps and Lists. Functions
represent blocks of code��instructions on how to do something that is within a particular
context and that is bound to variables in a particular scope. The ability to bind functions
to events, such as the user clicking a button on a screen, which may occur in the future,
provides a powerful way to build interactive, event-based applications.


Functions and Interactive Applications P105
һ��ʾ������̫�����Ҫչʾʲô��������callback���÷���
Callbacks are very common in interactive applications. For example, if a button is clicked,
perform a particular action.


Building New Functions
һ������չʾ��������һ���򵥵ļ�����������û�ио���ʲô�ر��
object Interactive extends App {
sealed trait Expr
case class Add(left: Expr, right: Expr) extends Expr
case class Mul(left: Expr, right: Expr) extends Expr
case class Val(value: Int) extends Expr
case class Var(name: String) extends Expr

object Calc {
  def calc(expr: Expr, vars: Map[String, Int]): Int = expr match {
    case Add(left, right) => calc(left, vars) + calc(right, vars)
    case Mul(left, right) => calc(left, vars) * calc(right, vars)
    case Val(v) => v
    case Var(name) => vars(name)
  }

  def buildCalc(expr: Expr): Map[String, Int] => Int = expr match {
    case Add(left, right) =>
      val lf = buildCalc(left)
      val rf = buildCalc(right)
      m => lf(m) + rf(m)

    case Mul(left, right) =>
      val lf = buildCalc(left)
      val rf = buildCalc(right)
      m => lf(m) * rf(m)

    case Val(v) => m => v

    case Var(name) => m => m(name)
  }
}

print(Calc.calc(Mul(Var("x"), Add(Val(1), Val(2))), Map("x" -> 5)))
}


Call-by-Name, Call-by-Value, and General Laziness
��java�У����������Ĳ��������ڵ��ú���ֵǰ�ͼ�����˵ģ��������
foo(1 + 1, "A String".length());

����ʱ������Ҫcall by name����ÿ���õ�������
However, there are some cases when we want to
parameters to be optionally evaluated or repeatedly evaluated. In these cases, Scala
provides the call-by-name mechanism. There��s no syntactic difference to the caller for
call-by-name parameters.

������־����һ�������Ե�����
if (logger.level().intValue() >= INFO.intValue()) {
logger.log(INFO, "The value is "+value);
}

In Scala, we can define a log method that takes the thing to log as call-by-name:
def log(level: Level, msg: => String) =
	if (logger.level.intValue >= level.intValue) logger.log(level, msg)

And you would call this code:
log(INFO, "The value is "+value)
��ʱ�ַ���ƴ�ӽ�����ʵ�ʵ���log������ʱ��ִ�С�
ע�ⶨ�巽����ʱ��ʹ��=>������ǰ����
��foo(s: String) is call-by-reference, and foo(s: => String) is call-by-name.

��ô�����ĳ���Ч�ʻ������أ������黹�Ǻܿ��
You may be wondering how the code could possibly perform as well if a function object
is being created and handed off to the log method. In the JVM, the cost of creating an
object that never escapes the current thread and is very short-lived is zero or very near
zero. The JVM may also inline the log method such that the test is performed without an
actual method call. The result is that your code will run as quickly with the Scala code as it
will with the Java code that has the repeated test for log level.

�����ӳټ��㣬����һ���ô��ǿ��ܱ����ö�Σ���ÿ�ζ���Ҫ���¼������������ж��ļ��ǲ��Ƕ�����line == null��
def allStrings(expr: => String): List[String] = expr match {
	case null => Nil
	case s => s :: allStrings(expr)
}
import java.io._
val br = new BufferedReader(new FileReader("foo.txt"))
allStrings(br.readLine)
�ͻ᷵�����е�����

Call-by-name is a very useful construct. In the next section, we��ll use it to build
complex control structures. 
��C#������﷨
using (TextReader textReader = new StreamReader(filename))
{
	return textReader.ReadLine();
}

��scala�У����ǿ��Ժ����׵Ķ��������Ľṹ
object Control {
  def using[A <: {def close(): Unit}, B](param: A)(f: A => B): B = 
  try {
    f(param)
  } finally {
    param.close()
  } 

  import scala.collection.mutable.ListBuffer

  def bmap[T](test: => Boolean)(block: => T): List[T] = {
    val ret = new ListBuffer[T]
    while(test) ret += block
    ret.toList
  }
}
ǰ����using�ؼ��ֵĶ��壬�����ǽ�һ�δ���ŵ�һ��list�еķ���

������JDBCѭ���оͿ���ʹ���ˣ�������һ��java�����������ģ�
import java.sql.*;
import java.util.ArrayList;
public class Person {
	private String name;
	private int age;
	private boolean valid;
	public Person(String n, int a, boolean v) {
		name = n;
		age = a;
		valid = v;
	}
	public static ArrayList<Person> findPeople(Connection conn)
		throws SQLException {
		Statement st = conn.createStatement();
		try {
			ResultSet rs = st.executeQuery("SELECT * FROM person");
			try {
				ArrayList<Person> ret = new ArrayList<Person>();
				while (rs.next()) {
					ret.add(new Person(rs.getString("name"),
					rs.getInt("age"),
					rs.getBoolean("valid")));
				}
				return ret;
			} finally {
				rs.close();
			}
		} finally {
			st.close();
		}
	}
}

ʹ���µĽṹд��������
object Person {
	import Control._
	import java.sql._
	def findPeople(conn: Connection): List[Person] =
	using(conn.createStatement){st =>
		using (st.executeQuery("SELECT * FROM person")){rs =>
			bmap(rs.next){
				new Person(rs.getString("name"), rs.getInt("age"), rs.getBoolean("valid"))
			}
		}
	}
}



Chapter5 Pattern Matching
��дfibonacci
def fibonacci(in: Int): Int = in match {
	case 0 => 0
	case 1 => 1
	case n => fibonacci(n - 1) + fibonacci(n - 2)
}
Ҳ���Խ�0��������Ϊcase n if n <= 0 => 0

ʵ����scala�ڱ����ڼ����case��䣬�������жϽ������

hint ����ʹ�� scalac -print MyMules.scala ���鿴scala��java
object MyMules {
	def myMules(name: String) = name match {
		case "Elwood" | "Madeline" => Some("Cat")
		case "Archer" => Some("Dog")
		case "Pumpkin" | "Firetruck" => Some("Fish")
		case _ => None
	}
}
��Ӧ�ľͲ����ˣ��ܳ�

scala��case������Բ�ͬ�����ͣ�
def test1(in: Any): String = in match {
	case 1 => "One"
	case "David" | "Archer" | Some("Dog") => "Walk"
	case _ => "No Clue"
}

Pattern matching is a very powerful way to avoid explicit casting.
�����ж���ģʽƥ���кܼ򵥣�
def test2(in: Any) = in match {
	case s: String => "String, length "+s.length
	case i: Int if i > 0 => "Natural Int"
	case i: Int => "Another Int"
	case a: AnyRef => a.getClass.getName
	case _ => "null"
}


Case Classes
We saw case classes earlier in the book. They are classes that get toString, hashCode, and
equals methods automatically. It turns out that they also get properties and extractors.
Case classes also have properties and can be constructed without using new.

Case class�Զ�������toString��hashCode��equals�����������½�������Ҫʹ��new�ؼ���
��
case class Person(name: String, age: Int, valid: Boolean)
val p = Person("David", 45, true)
����ֱ��ʹ��p.name ����������

Ҳ����ʹ����Ϊ�ɱ�ı���
case class MPerson(var name: String, var age: Int)

ʹ��case class�������ɴ������ַ�������������ж����䲢��ȡname���Եķ���
def older(p: Person): Option[String] = p match {
	case Person(name, age, true) if age > 35 => Some(name)
	case _ => None
}

ListҲ���������ã�
scala> val x = 1
x: Int = 1
scala> val rest = List(2,3,4)
rest: List[Int] = List(2, 3, 4)
scala> x :: rest
res0: List[Int] = List(1, 2, 3, 4)
scala> (x :: rest) match { // note the symmetry between creation and matching
     | case xprime :: restprime => println(xprime); println(restprime)
     | }
<console>:10: warning: match may not be exhaustive.
It would fail on the following input: Nil
              (x :: rest) match { // note the symmetry between creation and matc
hing
                 ^
1
List(2, 3, 4)

������һ��������͵ķ���
def sumOdd(in: List[Int]): Int = in match {
	case Nil => 0
	case x :: rest if x % 2 == 1 => x + sumOdd(rest)
	case _ :: rest => sumOdd(rest)
}

���������ȥ�����е������ظ��� P148
def noPairs[T](in: List[T]): List[T] = in match {
	case Nil => Nil
	case a :: b :: rest if a == b => noPairs(a :: rest)
	case a :: rest => a :: noPairs(rest)
}
noPairs(List(1,2,3,3,3,4,1,1))

ȥ���б���ignore֮ǰ���ַ�����
def ignore(in: List[String]): List[String] = in match {
	case Nil => Nil
	case _ :: "ignore" :: rest => ignore(rest)
	case x :: rest => x :: ignore(rest)
}

�������е�String
def getStrings(in: List[Any]): List[String] = in match {
	case Nil => Nil
	case (s: String) :: rest => s :: getStrings(rest)
	case _ :: rest => getStrings(rest)
}
However, the paradigmatic way of filtering a List[Any] into a List of a particular type
is by using a pattern as a function. We��ll see this in the ��Pattern Matching As Functions��
section.
����ȥList��һ��������࣬ʵ���ϲ��ǣ������һ�£�








